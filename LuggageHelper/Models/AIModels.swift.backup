import Foundation
import UIKit
import CoreImage

// MARK: - AI 功能相关数据模型

/// 物品信息识别结果
struct ItemInfo: Codable, Identifiable, Equatable, Hashable {
    let id = UUID()
    let name: String
    let category: ItemCategory
    let weight: Double // 克
    let volume: Double // 立方厘米
    let dimensions: Dimensions?
    let confidence: Double // 识别置信度 0.0-1.0
    let alternatives: [ItemInfo] // 替代品建议
    let source: String // 数据来源
    
    enum CodingKeys: String, CodingKey {
        case name, category, weight, volume, dimensions, confidence, alternatives, source
    }
    
    /// 初始化方法
    init(name: String, category: ItemCategory, weight: Double, volume: Double, 
         dimensions: Dimensions? = nil, confidence: Double = 1.0, 
         alternatives: [ItemInfo] = [], source: String = "AI识别") {
        self.name = name
        self.category = category
        self.weight = weight
        self.volume = volume
        self.dimensions = dimensions
        self.confidence = confidence
        self.alternatives = alternatives
        self.source = source
    }

    func hash(into hasher: inout Hasher) {
        hasher.combine(id)
    }
}

/// 物品类别枚举
enum ItemCategory: String, Codable, CaseIterable {
    case clothing = "clothing"           // 衣物
    case electronics = "electronics"     // 电子产品
    case toiletries = "toiletries"      // 洗漱用品
    case documents = "documents"         // 证件文件
    case medicine = "medicine"           // 药品保健
    case accessories = "accessories"     // 配饰用品
    case shoes = "shoes"                // 鞋类
    case books = "books"                // 书籍文具
    case food = "food"                  // 食品饮料
    case sports = "sports"              // 运动用品
    case beauty = "beauty"              // 美容化妆
    case other = "other"                // 其他
    
    /// 显示名称
    var displayName: String {
        switch self {
        case .clothing: return "衣物"
        case .electronics: return "电子产品"
        case .toiletries: return "洗漱用品"
        case .documents: return "证件文件"
        case .medicine: return "药品保健"
        case .accessories: return "配饰用品"
        case .shoes: return "鞋类"
        case .books: return "书籍文具"
        case .food: return "食品饮料"
        case .sports: return "运动用品"
        case .beauty: return "美容化妆"
        case .other: return "其他"
        }
    }
    
    /// 图标
    var icon: String {
        switch self {
        case .clothing: return "👕"
        case .electronics: return "📱"
        case .toiletries: return "🧴"
        case .documents: return "📄"
        case .medicine: return "💊"
        case .accessories: return "👜"
        case .shoes: return "👟"
        case .books: return "📚"
        case .food: return "🍎"
        case .sports: return "⚽"
        case .beauty: return "💄"
        case .other: return "📦"
        }
    }
}

/// 物品尺寸
struct Dimensions: Codable, Equatable {
    let length: Double // 长度 (cm)
    let width: Double  // 宽度 (cm)
    let height: Double // 高度 (cm)
    
    /// 计算体积
    var volume: Double {
        return length * width * height
    }
    
    /// 格式化显示
    var formatted: String {
        return String(format: "%.1f×%.1f×%.1f cm", length, width, height)
    }
}

// MARK: - 照片识别相关模型

/// 照片识别策略
enum PhotoRecognitionStrategy: String, Codable, CaseIterable {
    case aiVision = "aiVision"           // AI 视觉识别
    case textExtraction = "textExtraction" // 文字提取识别
    case colorAnalysis = "colorAnalysis"   // 颜色分析
    case shapeAnalysis = "shapeAnalysis"   // 形状分析
    
    var displayName: String {
        switch self {
        case .aiVision: return "AI 视觉识别"
        case .textExtraction: return "文字识别"
        case .colorAnalysis: return "颜色分析"
        case .shapeAnalysis: return "形状分析"
        }
    }
}

/// 识别方法
enum RecognitionMethod: String, Codable {
    case cloudAPI = "cloud_api"
    case offlineML = "offline_ml"
    case hybrid = "hybrid"
    case cached = "cached"
    case userCorrected = "user_corrected"
}

/// 照片识别结果
struct PhotoRecognitionResult: Codable, Identifiable {
    let id: UUID
    let itemInfo: ItemInfo
    let confidence: Double
    let recognitionMethod: RecognitionMethod
    let processingTime: TimeInterval
    let imageMetadata: ImageMetadata
    let alternatives: [RecognitionCandidate]
    let qualityScore: Double
    let timestamp: Date
    
    // 用户反馈
    var userFeedback: UserFeedback?
    var isVerified: Bool
    var correctedInfo: ItemInfo?
    
    enum CodingKeys: String, CodingKey {
        case id, itemInfo, confidence, recognitionMethod, processingTime, imageMetadata
        case alternatives, qualityScore, timestamp, userFeedback, isVerified, correctedInfo
    }
    
    init(itemInfo: ItemInfo, confidence: Double, recognitionMethod: RecognitionMethod, 
         processingTime: TimeInterval, imageMetadata: ImageMetadata, 
         alternatives: [RecognitionCandidate] = [], qualityScore: Double = 1.0) {
        self.id = UUID()
        self.itemInfo = itemInfo
        self.confidence = confidence
        self.recognitionMethod = recognitionMethod
        self.processingTime = processingTime
        self.imageMetadata = imageMetadata
        self.alternatives = alternatives
        self.qualityScore = qualityScore
        self.timestamp = Date()
        self.isVerified = false
    }
}

/// 识别候选项
struct RecognitionCandidate: Codable, Identifiable {
    let id: UUID
    let itemInfo: ItemInfo
    let confidence: Double
    let source: String
    
    enum CodingKeys: String, CodingKey {
        case id, itemInfo, confidence, source
    }
    
    init(itemInfo: ItemInfo, confidence: Double, source: String) {
        self.id = UUID()
        self.itemInfo = itemInfo
        self.confidence = confidence
        self.source = source
    }
}

/// 图片元数据
struct ImageMetadata: Codable {
    let width: Int
    let height: Int
    let fileSize: Int
    let format: String
    let dominantColors: [String]
    let brightness: Double
    let contrast: Double
    let hasText: Bool
    let estimatedObjects: Int
    let size: CGSize
    let timestamp: Date
    
    enum CodingKeys: String, CodingKey {
        case width, height, fileSize, format, dominantColors, brightness, contrast, hasText, estimatedObjects
        case size, timestamp
    }
    
    init(width: Int, height: Int, fileSize: Int, format: String, dominantColors: [String], 
         brightness: Double, contrast: Double, hasText: Bool, estimatedObjects: Int) {
        self.width = width
        self.height = height
        self.fileSize = fileSize
        self.format = format
        self.dominantColors = dominantColors
        self.brightness = brightness
        self.contrast = contrast
        self.hasText = hasText
        self.estimatedObjects = estimatedObjects
        self.size = CGSize(width: width, height: height)
        self.timestamp = Date()
    }
}

/// 用户反馈
struct UserFeedback: Codable, Identifiable {
    let id: UUID
    let recognitionResultId: UUID
    let isCorrect: Bool
    let correctedName: String?
    let correctedCategory: ItemCategory?
    let correctedProperties: [String: String]?
    let rating: Int // 1-5
    let comments: String?
    let timestamp: Date
    
    enum CodingKeys: String, CodingKey {
        case id, recognitionResultId, isCorrect, correctedName, correctedCategory
        case correctedProperties, rating, comments, timestamp
    }
    
    init(recognitionResultId: UUID, isCorrect: Bool, correctedName: String? = nil, 
         correctedCategory: ItemCategory? = nil, correctedProperties: [String: String]? = nil,
         rating: Int = 3, comments: String? = nil) {
        self.id = UUID()
        self.recognitionResultId = recognitionResultId
        self.isCorrect = isCorrect
        self.correctedName = correctedName
        self.correctedCategory = correctedCategory
        self.correctedProperties = correctedProperties
        self.rating = rating
        self.comments = comments
        self.timestamp = Date()
    }
}

// MARK: - 装箱相关模型

/// 装箱计划
struct PackingPlan: Codable, Identifiable {
    let id = UUID()
    let luggageId: UUID
    let items: [PackingItem]
    let totalWeight: Double
    let totalVolume: Double
    let efficiency: Double // 空间利用率 0.0-1.0
    let warnings: [PackingWarning]
    let suggestions: [String] // 装箱建议
    
    enum CodingKeys: String, CodingKey {
        case luggageId, items, totalWeight, totalVolume, efficiency, warnings, suggestions
    }
}

/// 装箱物品
struct PackingItem: Codable, Identifiable {
    let id = UUID()
    let itemId: UUID
    let position: PackingPosition
    let priority: Int // 装箱优先级 1-10
    let reason: String // 装箱建议原因
    
    enum CodingKeys: String, CodingKey {
        case itemId, position, priority, reason
    }
}

/// 装箱位置
enum PackingPosition: String, Codable {
    case bottom = "bottom"       // 底部
    case middle = "middle"       // 中部
    case top = "top"            // 顶部
    case side = "side"          // 侧面
    case corner = "corner"      // 角落
    
    var displayName: String {
        switch self {
        case .bottom: return "底部"
        case .middle: return "中部"
        case .top: return "顶部"
        case .side: return "侧面"
        case .corner: return "角落"
        }
    }
}

/// 装箱警告
struct PackingWarning: Codable, Identifiable {
    let id = UUID()
    let type: WarningType
    let message: String
    let severity: WarningSeverity
    
    enum CodingKeys: String, CodingKey {
        case type, message, severity
    }
}

/// 警告类型
enum WarningType: String, Codable {
    case overweight = "overweight"       // 超重
    case oversized = "oversized"         // 超尺寸
    case fragile = "fragile"            // 易碎品
    case liquid = "liquid"              // 液体限制
    case battery = "battery"            // 电池限制
    case prohibited = "prohibited"       // 禁止携带
    case attention = "attention"         // 注意事项
}

/// 警告严重程度
enum WarningSeverity: String, Codable {
    case low = "low"        // 低
    case medium = "medium"  // 中
    case high = "high"      // 高
    case critical = "critical" // 严重
    
    var color: String {
        switch self {
        case .low: return "yellow"
        case .medium: return "orange"
        case .high: return "red"
        case .critical: return "purple"
        }
    }
}

/// 装箱分析结果
struct PackingAnalysis: Codable, Identifiable {
    let id: UUID
    let luggageId: UUID
    let totalItems: Int
    let totalWeight: Double
    let totalVolume: Double
    let utilizationRate: Double // 利用率
    let categoryBreakdown: [PackingCategoryAnalysis]
    let recommendations: [SmartSuggestion]
    let warnings: [PackingWarning]
    let score: Double // 装箱评分 0-100
    let createdAt: Date
    
    enum CodingKeys: String, CodingKey {
        case id, luggageId, totalItems, totalWeight, totalVolume, utilizationRate
        case categoryBreakdown, recommendations, warnings, score, createdAt
    }
    
    init(luggageId: UUID, totalItems: Int, totalWeight: Double, totalVolume: Double, 
         utilizationRate: Double, categoryBreakdown: [PackingCategoryAnalysis], 
         recommendations: [SmartSuggestion], warnings: [PackingWarning], score: Double) {
        self.id = UUID()
        self.luggageId = luggageId
        self.totalItems = totalItems
        self.totalWeight = totalWeight
        self.totalVolume = totalVolume
        self.utilizationRate = utilizationRate
        self.categoryBreakdown = categoryBreakdown
        self.recommendations = recommendations
        self.warnings = warnings
        self.score = score
        self.createdAt = Date()
    }
}

/// 装箱类别分析
struct PackingCategoryAnalysis: Codable {
    let category: ItemCategory
    let itemCount: Int
    let totalWeight: Double
    let totalVolume: Double
    let weightPercentage: Double
    let volumePercentage: Double
    let averageItemWeight: Double
    let averageItemVolume: Double
}

// MARK: - 旅行建议相关模型

/// 旅行建议
struct TravelSuggestion: Codable, Identifiable {
    let id = UUID()
    let destination: String
    let duration: Int
    let season: String
    let activities: [String]
    let suggestedItems: [SuggestedItem]
    let categories: [ItemCategory]
    let tips: [String] // 旅行小贴士
    let warnings: [String] // 注意事项
    
    enum CodingKeys: String, CodingKey {
        case destination, duration, season, activities, suggestedItems, categories, tips, warnings
    }
    
    /// 获取必需品数量
    var essentialItemsCount: Int {
        return suggestedItems.filter { $0.importance == .essential }.count
    }
    
    /// 获取总预估重量
    var totalEstimatedWeight: Double {
        return suggestedItems.compactMap { $0.estimatedWeight }.reduce(0, +)
    }
    
    /// 获取总预估体积
    var totalEstimatedVolume: Double {
        return suggestedItems.compactMap { $0.estimatedVolume }.reduce(0, +)
    }
}

/// 建议物品
struct SuggestedItem: Codable, Identifiable {
    let id = UUID()
    let name: String
    let category: ItemCategory
    let importance: ImportanceLevel
    let reason: String
    let quantity: Int
    let estimatedWeight: Double? // 预估重量
    let estimatedVolume: Double? // 预估体积
    
    enum CodingKeys: String, CodingKey {
        case name, category, importance, reason, quantity, estimatedWeight, estimatedVolume
    }
}

/// 重要程度
enum ImportanceLevel: String, Codable, CaseIterable {
    case essential = "essential"     // 必需品
    case important = "important"     // 重要
    case recommended = "recommended" // 推荐
    case optional = "optional"       // 可选
    
    var displayName: String {
        switch self {
        case .essential: return "必需品"
        case .important: return "重要"
        case .recommended: return "推荐"
        case .optional: return "可选"
        }
    }
    
    var priority: Int {
        switch self {
        case .essential: return 4
        case .important: return 3
        case .recommended: return 2
        case .optional: return 1
        }
    }
}

// MARK: - 航空公司政策相关模型

/// 航空公司行李政策
struct AirlineLuggagePolicy: Codable, Identifiable {
    let id = UUID()
    let airline: String
    let carryOnWeight: Double // 手提行李重量限制 (kg)
    let carryOnDimensions: Dimensions // 手提行李尺寸限制
    let checkedWeight: Double // 托运行李重量限制 (kg)
    let checkedDimensions: Dimensions // 托运行李尺寸限制
    let restrictions: [String] // 限制条件
    let lastUpdated: Date // 最后更新时间
    let source: String // 数据来源
    
    enum CodingKeys: String, CodingKey {
        case airline, carryOnWeight, carryOnDimensions, checkedWeight, checkedDimensions
        case restrictions, lastUpdated, source
    }
    
    /// 检查是否符合手提行李要求
    func isCarryOnCompliant(weight: Double, dimensions: Dimensions) -> Bool {
        return weight <= carryOnWeight && 
               dimensions.length <= carryOnDimensions.length &&
               dimensions.width <= carryOnDimensions.width &&
               dimensions.height <= carryOnDimensions.height
    }
    
    /// 检查是否符合托运行李要求
    func isCheckedCompliant(weight: Double, dimensions: Dimensions) -> Bool {
        let totalDimension = dimensions.length + dimensions.width + dimensions.height
        let maxTotalDimension = checkedDimensions.length
        return weight <= checkedWeight && totalDimension <= maxTotalDimension
    }
}

/// 政策检查结果
struct PolicyCheckResult: Codable, Identifiable {
    let id: UUID
    let overallCompliance: Bool
    let violations: [AirlinePolicyViolation]
    let warnings: [AirlinePolicyWarning]
    let recommendations: [String]
    let estimatedFees: AirlineEstimatedFees?
    
    enum CodingKeys: String, CodingKey {
        case id, overallCompliance, violations, warnings, recommendations, estimatedFees
    }
    
    init(overallCompliance: Bool, violations: [AirlinePolicyViolation], 
         warnings: [AirlinePolicyWarning], recommendations: [String], 
         estimatedFees: AirlineEstimatedFees? = nil) {
        self.id = UUID()
        self.overallCompliance = overallCompliance
        self.violations = violations
        self.warnings = warnings
        self.recommendations = recommendations
        self.estimatedFees = estimatedFees
    }
}

/// 航空公司政策违规
struct AirlinePolicyViolation: Codable, Identifiable {
    let id: UUID
    let itemName: String
    let violationType: AirlineViolationType
    let description: String
    let severity: AirlineViolationSeverity
    let suggestion: String
    
    enum CodingKeys: String, CodingKey {
        case id, itemName, violationType, description, severity, suggestion
    }
    
    init(itemName: String, violationType: AirlineViolationType, description: String,
         severity: AirlineViolationSeverity, suggestion: String) {
        self.id = UUID()
        self.itemName = itemName
        self.violationType = violationType
        self.description = description
        self.severity = severity
        self.suggestion = suggestion
    }
}

/// 航空公司违规类型
enum AirlineViolationType: String, Codable {
    case prohibited = "prohibited"
    case overweight = "overweight"
    case oversized = "oversized"
    case liquid = "liquid"
    case battery = "battery"
    case sharp = "sharp"
    
    var displayName: String {
        switch self {
        case .prohibited: return "禁止携带"
        case .overweight: return "超重"
        case .oversized: return "超尺寸"
        case .liquid: return "液体限制"
        case .battery: return "电池限制"
        case .sharp: return "尖锐物品"
        }
    }
}

/// 航空公司违规严重程度
enum AirlineViolationSeverity: String, Codable {
    case low = "low"
    case medium = "medium"
    case high = "high"
    case critical = "critical"
    
    var displayName: String {
        switch self {
        case .low: return "轻微"
        case .medium: return "中等"
        case .high: return "严重"
        case .critical: return "极严重"
        }
    }
}

/// 航空公司政策警告
struct AirlinePolicyWarning: Codable, Identifiable {
    let id: UUID
    let itemName: String
    let warningType: WarningType
    let message: String
    let suggestion: String
    
    enum CodingKeys: String, CodingKey {
        case id, itemName, warningType, message, suggestion
    }
    
    init(itemName: String, warningType: WarningType, message: String, suggestion: String) {
        self.id = UUID()
        self.itemName = itemName
        self.warningType = warningType
        self.message = message
        self.suggestion = suggestion
    }
}

/// 航空公司预估费用
struct AirlineEstimatedFees: Codable {
    let overweightFee: Double
    let oversizeFee: Double
    let currency: String
    
    init(overweightFee: Double, oversizeFee: Double, currency: String = "CNY") {
        self.overweightFee = overweightFee
        self.oversizeFee = oversizeFee
        self.currency = currency
    }
    
    /// 总费用
    var totalFee: Double {
        return overweightFee + oversizeFee
    }
    
    /// 格式化显示
    var formattedTotal: String {
        return String(format: "%.2f %@", totalFee, currency)
    }
}

// MARK: - 智能建议相关模型

/// 智能建议
struct SmartSuggestion: Codable, Identifiable {
    let id: UUID
    let type: SuggestionType
    let title: String
    let description: String
    let priority: Int // 1-10
    let category: ItemCategory?
    let actionable: Bool // 是否可操作
    let metadata: [String: String] // 额外元数据
    let createdAt: Date
    
    enum CodingKeys: String, CodingKey {
        case id, type, title, description, priority, category, actionable, metadata, createdAt
    }
    
    init(type: SuggestionType, title: String, description: String, priority: Int = 5, 
         category: ItemCategory? = nil, actionable: Bool = true, metadata: [String: String] = [:]) {
        self.id = UUID()
        self.type = type
        self.title = title
        self.description = description
        self.priority = priority
        self.category = category
        self.actionable = actionable
        self.metadata = metadata
        self.createdAt = Date()
    }
}

/// 建议类型
enum SuggestionType: String, Codable {
    case itemRecommendation = "itemRecommendation"   // 物品推荐
    case packingOptimization = "packingOptimization" // 装箱优化
    case weightReduction = "weightReduction"         // 减重建议
    case spaceOptimization = "spaceOptimization"     // 空间优化
    case safetyWarning = "safetyWarning"            // 安全警告
    case travelTip = "travelTip"                    // 旅行贴士
    case weatherAlert = "weatherAlert"              // 天气提醒
    case culturalNote = "culturalNote"              // 文化提醒
    
    var displayName: String {
        switch self {
        case .itemRecommendation: return "物品推荐"
        case .packingOptimization: return "装箱优化"
        case .weightReduction: return "减重建议"
        case .spaceOptimization: return "空间优化"
        case .safetyWarning: return "安全警告"
        case .travelTip: return "旅行贴士"
        case .weatherAlert: return "天气提醒"
        case .culturalNote: return "文化提醒"
        }
    }
    
    var icon: String {
        switch self {
        case .itemRecommendation: return "💡"
        case .packingOptimization: return "📦"
        case .weightReduction: return "⚖️"
        case .spaceOptimization: return "📏"
        case .safetyWarning: return "⚠️"
        case .travelTip: return "💭"
        case .weatherAlert: return "🌤️"
        case .culturalNote: return "🌍"
        }
    }
}

// MARK: - 请求模型

/// 旅行建议请求
struct TravelSuggestionRequest: Codable, Identifiable, Hashable {
    let id: UUID
    let destination: String
    let duration: Int
    let season: String
    let activities: [String]
    let travelStyle: String
    let budget: String
    let companions: Int
    
    enum CodingKeys: String, CodingKey {
        case id, destination, duration, season, activities, travelStyle, budget, companions
    }
    
    init(destination: String, duration: Int, season: String, activities: [String], 
         travelStyle: String = "standard", budget: String = "medium", companions: Int = 0) {
        self.id = UUID()
        self.destination = destination
        self.duration = duration
        self.season = season
        self.activities = activities
        self.travelStyle = travelStyle
        self.budget = budget
        self.companions = companions
    }
    
    func hash(into hasher: inout Hasher) {
        hasher.combine(destination)
        hasher.combine(duration)
        hasher.combine(season)
        hasher.combine(activities)
        hasher.combine(travelStyle)
        hasher.combine(budget)
        hasher.combine(companions)
    }
    
    static func == (lhs: TravelSuggestionRequest, rhs: TravelSuggestionRequest) -> Bool {
        return lhs.destination == rhs.destination &&
               lhs.duration == rhs.duration &&
               lhs.season == rhs.season &&
               lhs.activities == rhs.activities &&
               lhs.travelStyle == rhs.travelStyle &&
               lhs.budget == rhs.budget &&
               lhs.companions == rhs.companions
    }
}

/// 装箱优化请求
struct PackingOptimizationRequest: Codable, Identifiable, Hashable {
    let id: UUID
    let luggageId: UUID
    let itemIds: [UUID]
    let constraints: PackingConstraints
    let preferences: PackingPreferences
    
    enum CodingKeys: String, CodingKey {
        case id, luggageId, itemIds, constraints, preferences
    }
    
    init(luggageId: UUID, itemIds: [UUID], constraints: PackingConstraints = .default, 
         preferences: PackingPreferences = .default) {
        self.id = UUID()
        self.luggageId = luggageId
        self.itemIds = itemIds
        self.constraints = constraints
        self.preferences = preferences
    }
    
    func hash(into hasher: inout Hasher) {
        hasher.combine(luggageId)
        hasher.combine(itemIds)
    }
    
    static func == (lhs: PackingOptimizationRequest, rhs: PackingOptimizationRequest) -> Bool {
        return lhs.luggageId == rhs.luggageId && lhs.itemIds == rhs.itemIds
    }
}

/// 替代品请求
struct AlternativesRequest: Codable, Identifiable, Hashable {
    let id: UUID
    let itemId: UUID
    let constraints: AlternativeConstraints
    let maxResults: Int
    
    enum CodingKeys: String, CodingKey {
        case id, itemId, constraints, maxResults
    }
    
    init(itemId: UUID, constraints: AlternativeConstraints = .default, maxResults: Int = 5) {
        self.id = UUID()
        self.itemId = itemId
        self.constraints = constraints
        self.maxResults = maxResults
    }
    
    func hash(into hasher: inout Hasher) {
        hasher.combine(itemId)
    }
    
    static func == (lhs: AlternativesRequest, rhs: AlternativesRequest) -> Bool {
        return lhs.itemId == rhs.itemId
    }
}

// MARK: - 约束和偏好模型

/// 装箱约束条件
struct PackingConstraints: Codable {
    let maxWeight: Double
    let maxVolume: Double
    let restrictions: [String] // 限制条件
    let priorities: [ItemCategory] // 优先级类别
    
    /// 默认约束条件
    static let `default` = PackingConstraints(
        maxWeight: 23000, // 23kg
        maxVolume: 100000, // 100L
        restrictions: [],
        priorities: [.documents, .medicine, .electronics]
    )
}

/// 装箱偏好
struct PackingPreferences: Codable {
    let prioritizeWeight: Bool
    let prioritizeVolume: Bool
    let prioritizeAccessibility: Bool
    let separateCategories: Bool
    
    static let `default` = PackingPreferences(
        prioritizeWeight: true,
        prioritizeVolume: true,
        prioritizeAccessibility: false,
        separateCategories: true
    )
}

/// 替代品约束条件
struct AlternativeConstraints: Codable {
    let maxWeight: Double? // 最大重量限制（克）
    let maxVolume: Double? // 最大体积限制（立方厘米）
    let maxBudget: Double? // 预算上限（元）
    let requiredFeatures: [String]? // 必需功能
    let excludedBrands: [String]? // 排除品牌
    let preferredBrands: [String]? // 偏好品牌
    
    init(maxWeight: Double? = nil, maxVolume: Double? = nil, maxBudget: Double? = nil,
         requiredFeatures: [String]? = nil, excludedBrands: [String]? = nil,
         preferredBrands: [String]? = nil) {
        self.maxWeight = maxWeight
        self.maxVolume = maxVolume
        self.maxBudget = maxBudget
        self.requiredFeatures = requiredFeatures
        self.excludedBrands = excludedBrands
        self.preferredBrands = preferredBrands
    }
    
    /// 默认约束条件
    static let `default` = AlternativeConstraints()
}

// MARK: - 扩展方法

extension ItemInfo {
    /// 创建默认物品信息
    static func defaultItem(name: String) -> ItemInfo {
        return ItemInfo(
            name: name,
            category: .other,
            weight: 100.0,
            volume: 100.0,
            confidence: 0.5,
            source: "默认值"
        )
    }
    
    /// 从 AI 响应创建
    static func fromAIResponse(_ response: [String: Any], originalName: String) -> ItemInfo {
        let name = response["name"] as? String ?? originalName
        let categoryString = response["category"] as? String ?? "other"
        let category = ItemCategory(rawValue: categoryString) ?? .other
        let weight = response["weight"] as? Double ?? 100.0
        let volume = response["volume"] as? Double ?? 100.0
        let confidence = response["confidence"] as? Double ?? 0.8
        
        return ItemInfo(
            name: name,
            category: category,
            weight: weight,
            volume: volume,
            confidence: confidence,
            source: "AI识别"
        )
    }
    
    /// Mock 数据
    static let mock = ItemInfo(
        name: "测试物品",
        category: .other,
        weight: 100.0,
        volume: 100.0,
        confidence: 0.8,
        source: "Mock"
    )
}

extension PhotoRecognitionResult {
    /// Mock 数据
    static let mock = PhotoRecognitionResult(
        itemInfo: ItemInfo.mock,
        confidence: 0.8,
        recognitionMethod: .cloudAPI,
        processingTime: 2.5,
        imageMetadata: ImageMetadata.mock
    )
}

extension ImageMetadata {
    /// Mock 数据
    static let mock = ImageMetadata(
        width: 1024,
        height: 768,
        fileSize: 1024000,
        format: "JPEG",
        dominantColors: ["#FF0000", "#00FF00", "#0000FF"],
        brightness: 0.7,
        contrast: 0.8,
        hasText: false,
        estimatedObjects: 1
    )
}

// MARK: - UIImage 扩展

extension UIImage {
    /// 修正图片方向
    func fixOrientation() -> UIImage {
        if imageOrientation == .up {
            return self
        }
        
        UIGraphicsBeginImageContextWithOptions(size, false, scale)
        draw(in: CGRect(origin: .zero, size: size))
        let normalizedImage = UIGraphicsGetImageFromCurrentImageContext()
        UIGraphicsEndImageContext()
        
        return normalizedImage ?? self
    }
}

// MARK: - 缺失的类型定义

/// 物品识别请求
struct ItemIdentificationRequest: Codable, Hashable {
    let name: String
    let model: String?
    let category: ItemCategory?
    let hint: String?
    
    init(name: String, model: String? = nil, category: ItemCategory? = nil, hint: String? = nil) {
        self.name = name
        self.model = model
        self.category = category
        self.hint = hint
    }
    
    func hash(into hasher: inout Hasher) {
        hasher.combine(name)
        hasher.combine(model)
        hasher.combine(category)
        hasher.combine(hint)
    }
}

/// 用户偏好
struct UserPreferences: Codable {
    let preferredBrands: [String]
    let avoidedItems: [String]
    let packingStyle: PackingStyle
    let budgetLevel: BudgetLevel
    let travelFrequency: TravelFrequency
    
    init() {
        self.preferredBrands = []
        self.avoidedItems = []
        self.packingStyle = .standard
        self.budgetLevel = .medium
        self.travelFrequency = .occasional
    }
}

/// 装箱风格
enum PackingStyle: String, Codable {
    case minimal = "minimal"     // 轻装
    case standard = "standard"   // 标准
    case comprehensive = "comprehensive" // 充分准备
    
    var displayName: String {
        switch self {
        case .minimal: return "轻装出行"
        case .standard: return "标准装备"
        case .comprehensive: return "充分准备"
        }
    }
}

/// 预算水平
enum BudgetLevel: String, Codable {
    case low = "low"
    case medium = "medium"
    case high = "high"
    
    var displayName: String {
        switch self {
        case .low: return "经济型"
        case .medium: return "中等"
        case .high: return "高端"
        }
    }
}

/// 旅行频率
enum TravelFrequency: String, Codable {
    case rare = "rare"           // 很少
    case occasional = "occasional" // 偶尔
    case frequent = "frequent"   // 经常
    case business = "business"   // 商务
    
    var displayName: String {
        switch self {
        case .rare: return "很少旅行"
        case .occasional: return "偶尔旅行"
        case .frequent: return "经常旅行"
        case .business: return "商务出行"
        }
    }
}

/// 用户档案
struct UserProfile: Codable {
    let id: UUID
    let preferences: UserPreferences
    let travelHistory: [TravelRecord]
    let itemPreferences: [ItemPreference]
    let createdAt: Date
    let updatedAt: Date
    
    init(id: UUID = UUID()) {
        self.id = id
        self.preferences = UserPreferences()
        self.travelHistory = []
        self.itemPreferences = []
        self.createdAt = Date()
        self.updatedAt = Date()
    }
}

/// 旅行记录
struct TravelRecord: Codable, Identifiable {
    let id: UUID
    let destination: String
    let startDate: Date
    let endDate: Date
    let purpose: TravelPurpose
    let satisfaction: Int // 1-5 满意度
    let itemsUsed: [UUID] // 使用的物品ID
    let itemsUnused: [UUID] // 未使用的物品ID
    let notes: String?
    
    init(destination: String, startDate: Date, endDate: Date, purpose: TravelPurpose) {
        self.id = UUID()
        self.destination = destination
        self.startDate = startDate
        self.endDate = endDate
        self.purpose = purpose
        self.satisfaction = 3
        self.itemsUsed = []
        self.itemsUnused = []
        self.notes = nil
    }
}

/// 旅行目的
enum TravelPurpose: String, Codable {
    case leisure = "leisure"     // 休闲
    case business = "business"   // 商务
    case family = "family"       // 探亲
    case study = "study"         // 学习
    case medical = "medical"     // 医疗
    
    var displayName: String {
        switch self {
        case .leisure: return "休闲旅行"
        case .business: return "商务出行"
        case .family: return "探亲访友"
        case .study: return "学习交流"
        case .medical: return "医疗健康"
        }
    }
}

/// 物品偏好
struct ItemPreference: Codable, Identifiable {
    let id: UUID
    let itemName: String
    let category: ItemCategory
    let preference: PreferenceType
    let reason: String?
    
    init(itemName: String, category: ItemCategory, preference: PreferenceType, reason: String? = nil) {
        self.id = UUID()
        self.itemName = itemName
        self.category = category
        self.preference = preference
        self.reason = reason
    }
}

/// 偏好类型
enum PreferenceType: String, Codable {
    case love = "love"       // 喜欢
    case like = "like"       // 一般喜欢
    case neutral = "neutral" // 中性
    case dislike = "dislike" // 不喜欢
    case avoid = "avoid"     // 避免
    
    var displayName: String {
        switch self {
        case .love: return "非常喜欢"
        case .like: return "喜欢"
        case .neutral: return "中性"
        case .dislike: return "不喜欢"
        case .avoid: return "避免"
        }
    }
}

/// 旅行计划
struct TravelPlan: Codable, Identifiable {
    let id: UUID
    let destination: String
    let startDate: Date
    let endDate: Date
    let season: String
    let activities: [String]
    let airline: String?
    let weightLimit: Double?
    let companions: Int // 同行人数
    let accommodation: AccommodationType
    let climate: ClimateInfo?
    
    init(destination: String, startDate: Date, endDate: Date, season: String, activities: [String]) {
        self.id = UUID()
        self.destination = destination
        self.startDate = startDate
        self.endDate = endDate
        self.season = season
        self.activities = activities
        self.airline = nil
        self.weightLimit = nil
        self.companions = 0
        self.accommodation = .hotel
        self.climate = nil
    }
    
    /// 旅行天数
    var duration: Int {
        return Calendar.current.dateComponents([.day], from: startDate, to: endDate).day ?? 1
    }
}

/// 住宿类型
enum AccommodationType: String, Codable {
    case hotel = "hotel"
    case hostel = "hostel"
    case airbnb = "airbnb"
    case camping = "camping"
    case family = "family"
    
    var displayName: String {
        switch self {
        case .hotel: return "酒店"
        case .hostel: return "青旅"
        case .airbnb: return "民宿"
        case .camping: return "露营"
        case .family: return "亲友家"
        }
    }
}

/// 气候信息
struct ClimateInfo: Codable {
    let temperature: TemperatureRange
    let humidity: Double // 湿度百分比
    let rainfall: Double // 降雨量
    let season: String
    
    struct TemperatureRange: Codable {
        let min: Double
        let max: Double
        let unit: String // "C" or "F"
        
        var formatted: String {
            return "\(Int(min))°-\(Int(max))°\(unit)"
        }
    }
}

/// 遗漏物品警告
struct MissingItemAlert: Codable, Identifiable {
    let id = UUID()
    let itemName: String
    let category: ItemCategory
    let importance: ImportanceLevel
    let reason: String
    let suggestion: String?
    
    enum CodingKeys: String, CodingKey {
        case itemName, category, importance, reason, suggestion
    }
}

/// 重量预测结果
struct WeightPrediction: Codable {
    let totalWeight: Double
    let breakdown: [CategoryWeight]
    let warnings: [String]
    let suggestions: [String]
    let confidence: Double
    
    struct CategoryWeight: Codable {
        let category: ItemCategory
        let weight: Double
        let percentage: Double
    }
}

/// 替代物品
struct AlternativeItem: Codable, Identifiable {
    let id: UUID
    let name: String
    let category: ItemCategory
    let weight: Double
    let volume: Double
    let dimensions: Dimensions
    let advantages: [String]
    let disadvantages: [String]
    let suitability: Double
    let reason: String
    let estimatedPrice: Double?
    let availability: String?
    let compatibilityScore: Double
    let functionalityMatch: Double?
    let versatility: Double?
    
    enum CodingKeys: String, CodingKey {
        case id, name, category, weight, volume, dimensions, advantages, disadvantages, 
             suitability, reason, estimatedPrice, availability, compatibilityScore,
             functionalityMatch, versatility
    }
    
    init(name: String, category: ItemCategory, weight: Double, volume: Double,
         dimensions: Dimensions, advantages: [String], disadvantages: [String],
         suitability: Double, reason: String, estimatedPrice: Double? = nil,
         availability: String? = nil, compatibilityScore: Double,
         functionalityMatch: Double? = nil, versatility: Double? = nil) {
        self.id = UUID()
        self.name = name
        self.category = category
        self.weight = weight
        self.volume = volume
        self.dimensions = dimensions
        self.advantages = advantages
        self.disadvantages = disadvantages
        self.suitability = suitability
        self.reason = reason
        self.estimatedPrice = estimatedPrice
        self.availability = availability
        self.compatibilityScore = compatibilityScore
        self.functionalityMatch = functionalityMatch
        self.versatility = versatility
    }
}

/// 航班类型
enum FlightType: String, Codable {
    case domestic = "domestic"
    case international = "international"
    
    var displayName: String {
        switch self {
        case .domestic: return "国内航班"
        case .international: return "国际航班"
        }
    }
}

/// 舱位等级
enum CabinClass: String, Codable {
    case economy = "economy"
    case business = "business"
    case first = "first"
    
    var displayName: String {
        switch self {
        case .economy: return "经济舱"
        case .business: return "商务舱"
        case .first: return "头等舱"
        }
    }
}

// MARK: - 协议定义

/// 行李项目协议
protocol LuggageItemProtocol {
    var id: UUID { get }
    var name: String { get }
    var weight: Double { get }
    var volume: Double { get }
}

/// 行李箱协议
protocol LuggageProtocol {
    var id: UUID { get }
    var name: String { get }
    var capacity: Double { get }
    var emptyWeight: Double { get }
}

// MARK: - 类型别名（为了兼容性）

/// 政策违规类型别名
typealias PolicyViolation = AirlinePolicyViolation

/// 政策警告类型别名
typealias PolicyWarning = AirlinePolicyWarning

/// 预估费用类型别名
typealias EstimatedFees = AirlineEstimatedFees

/// 违规类型别名
typealias ViolationType = AirlineViolationType

/// 违规严重程度别名
typealias ViolationSeverity = AirlineViolationSeverity

// MARK: - 批量识别结果

// BatchRecognitionResult 已在 BatchRecognitionService.swift 中定义

// DetectedObject 已在 ObjectDetectionEngine.swift 中定义

/// 对象类别
enum ObjectCategory: String, Codable, CaseIterable {
    case clothing = "clothing"
    case electronics = "electronics"
    case accessories = "accessories"
    case toiletries = "toiletries"
    case documents = "documents"
    case food = "food"
    case other = "other"
    
    var displayName: String {
        switch self {
        case .clothing: return "衣物"
        case .electronics: return "电子产品"
        case .accessories: return "配饰"
        case .toiletries: return "洗漱用品"
        case .documents: return "文件"
        case .food: return "食品"
        case .other: return "其他"
        }
    }
}